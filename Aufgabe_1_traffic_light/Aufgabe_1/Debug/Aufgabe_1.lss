
Aufgabe_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000833  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d9  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
		Dann 100ms gelb
		Dann wdh
*/

int main(){
	traffic_light_init();
  80:	0e 94 45 00 	call	0x8a	; 0x8a <traffic_light_init>
	while (1)
	{
		traffic_light_loop();
  84:	0e 94 49 00 	call	0x92	; 0x92 <traffic_light_loop>
  88:	fd cf       	rjmp	.-6      	; 0x84 <main+0x4>

0000008a <traffic_light_init>:
#include "custom_utilities.h"



void traffic_light_init(){
	SET_PIN_OUTPUT(DDRB, RED);		// red
  8a:	24 9a       	sbi	0x04, 4	; 4
	SET_PIN_OUTPUT(DDRB, YELLOW);	// yellow
  8c:	23 9a       	sbi	0x04, 3	; 4
	SET_PIN_OUTPUT(DDRB, GREEN);	// green
  8e:	22 9a       	sbi	0x04, 2	; 4
  90:	08 95       	ret

00000092 <traffic_light_loop>:
}

void traffic_light_loop(){
	// 1000ms: red
	SET_PIN_HIGH(PORTB, RED);
  92:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	83 ed       	ldi	r24, 0xD3	; 211
  98:	90 e3       	ldi	r25, 0x30	; 48
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <traffic_light_loop+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <traffic_light_loop+0x12>
  a4:	00 00       	nop
	_delay_ms(TIME_RED);
	
	// 100ms:  red + yellow
	SET_PIN_HIGH(PORTB, YELLOW);
  a6:	2b 9a       	sbi	0x05, 3	; 5
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	81 ee       	ldi	r24, 0xE1	; 225
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <traffic_light_loop+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <traffic_light_loop+0x26>
  b8:	00 00       	nop
	_delay_ms(TIME_YELLOW);
	
	// 1000ms: green
	SET_PIN_LOW(PORTB, RED);
  ba:	2c 98       	cbi	0x05, 4	; 5
	SET_PIN_LOW(PORTB, YELLOW);
  bc:	2b 98       	cbi	0x05, 3	; 5
	SET_PIN_HIGH(PORTB, GREEN);
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <traffic_light_loop+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <traffic_light_loop+0x3e>
  d0:	00 00       	nop
	_delay_ms(TIME_GREEN);
	
	// 100ms: yellow
	SET_PIN_LOW(PORTB, GREEN);
  d2:	2a 98       	cbi	0x05, 2	; 5
	SET_PIN_HIGH(PORTB, YELLOW);
  d4:	2b 9a       	sbi	0x05, 3	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	81 ee       	ldi	r24, 0xE1	; 225
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <traffic_light_loop+0x4a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <traffic_light_loop+0x54>
  e6:	00 00       	nop
	_delay_ms(TIME_YELLOW);
	
	SET_PIN_LOW(PORTB, YELLOW);
  e8:	2b 98       	cbi	0x05, 3	; 5
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
