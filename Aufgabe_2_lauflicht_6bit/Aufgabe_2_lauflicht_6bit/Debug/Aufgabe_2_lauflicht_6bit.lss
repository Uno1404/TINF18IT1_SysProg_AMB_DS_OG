
Aufgabe_2_lauflicht_6bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d9  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000404  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <lauflicht_6bit_init>:



void lauflicht_6bit_init() {
	// one pin-bank is sufficient:
	DDRB  |= 0B00111111;				// Declare pins 8-13 as output
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f 63       	ori	r24, 0x3F	; 63
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= NUMBER_OF_PINS;			// Set pin 8 to High		
  86:	28 9a       	sbi	0x05, 0	; 5
  88:	08 95       	ret

0000008a <lauflicht_6bit_loop>:
}

void lauflicht_6bit_loop() {
	while (!(PORTB & END_VALUE)) {		// while Pin 13 is LOW
  8a:	2d 99       	sbic	0x05, 5	; 5
  8c:	0e c0       	rjmp	.+28     	; 0xaa <lauflicht_6bit_loop+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	89 e6       	ldi	r24, 0x69	; 105
  92:	98 e1       	ldi	r25, 0x18	; 24
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <lauflicht_6bit_loop+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lauflicht_6bit_loop+0x14>
  9e:	00 00       	nop
		_delay_ms(TIME_DELAY);
				
		PORTB <<= 1;					// shift the HIGH state to the left
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	88 0f       	add	r24, r24
  a4:	85 b9       	out	0x05, r24	; 5
	DDRB  |= 0B00111111;				// Declare pins 8-13 as output
	PORTB |= NUMBER_OF_PINS;			// Set pin 8 to High		
}

void lauflicht_6bit_loop() {
	while (!(PORTB & END_VALUE)) {		// while Pin 13 is LOW
  a6:	2d 9b       	sbis	0x05, 5	; 5
  a8:	f2 cf       	rjmp	.-28     	; 0x8e <lauflicht_6bit_loop+0x4>
		_delay_ms(TIME_DELAY);
				
		PORTB <<= 1;					// shift the HIGH state to the left
	}
	while (!(PORTB & START_VALUE)) {	// while PIN 8 is LOW
  aa:	28 99       	sbic	0x05, 0	; 5
  ac:	0e c0       	rjmp	.+28     	; 0xca <lauflicht_6bit_loop+0x40>
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	89 e6       	ldi	r24, 0x69	; 105
  b2:	98 e1       	ldi	r25, 0x18	; 24
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <lauflicht_6bit_loop+0x2a>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lauflicht_6bit_loop+0x34>
  be:	00 00       	nop
		_delay_ms(TIME_DELAY);
		
		PORTB >>= 1;					// shift the HIGH state to the left
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	86 95       	lsr	r24
  c4:	85 b9       	out	0x05, r24	; 5
	while (!(PORTB & END_VALUE)) {		// while Pin 13 is LOW
		_delay_ms(TIME_DELAY);
				
		PORTB <<= 1;					// shift the HIGH state to the left
	}
	while (!(PORTB & START_VALUE)) {	// while PIN 8 is LOW
  c6:	28 9b       	sbis	0x05, 0	; 5
  c8:	f2 cf       	rjmp	.-28     	; 0xae <lauflicht_6bit_loop+0x24>
  ca:	08 95       	ret

000000cc <main>:
	6-Bit Lauflicht… freie Wahl bei Laufzeit. Licht läuft hin und her. Auch gerne mehrere auf einmal laufen lassen
*/


int main() {
	lauflicht_6bit_init();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <lauflicht_6bit_init>
	
	while (1) {
		lauflicht_6bit_loop();
  d0:	0e 94 45 00 	call	0x8a	; 0x8a <lauflicht_6bit_loop>
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <main+0x4>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
