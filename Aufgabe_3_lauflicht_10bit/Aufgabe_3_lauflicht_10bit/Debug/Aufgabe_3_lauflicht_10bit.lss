
Aufgabe_3_lauflicht_10bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081f  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ea  00000000  00000000  00000ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000399  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  8e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lauflicht_10bit_init>:

char direction = LEFT;

void lauflicht_10bit_init() {
	//DDRB = 0b00001111;
	SET_PIN_OUTPUT(DDRB, DDB3);
  96:	23 9a       	sbi	0x04, 3	; 4
	SET_PIN_OUTPUT(DDRB, DDB2);
  98:	22 9a       	sbi	0x04, 2	; 4
	SET_PIN_OUTPUT(DDRB, DDB1);
  9a:	21 9a       	sbi	0x04, 1	; 4
	SET_PIN_OUTPUT(DDRB, DDB0);
  9c:	20 9a       	sbi	0x04, 0	; 4
	
	//DDRD = 0b11111100;
	SET_PIN_OUTPUT(DDRD, DDD7);
  9e:	57 9a       	sbi	0x0a, 7	; 10
	SET_PIN_OUTPUT(DDRD, DDD6);
  a0:	56 9a       	sbi	0x0a, 6	; 10
	SET_PIN_OUTPUT(DDRD, DDD5);
  a2:	55 9a       	sbi	0x0a, 5	; 10
	SET_PIN_OUTPUT(DDRD, DDD4);
  a4:	54 9a       	sbi	0x0a, 4	; 10
	SET_PIN_OUTPUT(DDRD, DDD3);
  a6:	53 9a       	sbi	0x0a, 3	; 10
	SET_PIN_OUTPUT(DDRD, DDD2);
  a8:	52 9a       	sbi	0x0a, 2	; 10
	
	//initial state: Turn on the LED at the right border and set the floating direction to LEFT ('l')
	SET_PIN_HIGH(START_PORT, START_PIN);
  aa:	5b 9a       	sbi	0x0b, 3	; 11
  ac:	08 95       	ret

000000ae <moveLeft>:
}

void moveLeft() {
	//if PortB is 0, the light is at register d, and vice versa. (PortD can not be 0 because the least significant bit of it is a status bit which we may not change)
	if (PORTB == 0) {
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	81 11       	cpse	r24, r1
  b2:	05 c0       	rjmp	.+10     	; 0xbe <moveLeft+0x10>
		//after the bitshift we have to add 1 again to maintain the status of the lsb
		PORTD = (PORTD >> 1) + 1;
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	86 95       	lsr	r24
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret
	}
	else if (PORTD == 1) {
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	19 f4       	brne	.+6      	; 0xca <moveLeft+0x1c>
		PORTB = PORTB >> 1;
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	86 95       	lsr	r24
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	08 95       	ret

000000cc <moveRight>:
	}
}

void moveRight() {
	if (PORTB == 0) {
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	81 11       	cpse	r24, r1
  d0:	05 c0       	rjmp	.+10     	; 0xdc <moveRight+0x10>
		//when bitshifting to the left we first have to nullify the status bit, because we would shift it which would cause unexpected results. After shifting we add 1 again
		PORTD = ((PORTD-1) << 1) + 1;
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	88 0f       	add	r24, r24
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	08 95       	ret
	}
	else if (PORTD == 1) {
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	19 f4       	brne	.+6      	; 0xe8 <moveRight+0x1c>
		PORTB = PORTB << 1;
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	88 0f       	add	r24, r24
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	08 95       	ret

000000ea <lauflicht_10bit_loop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	81 ee       	ldi	r24, 0xE1	; 225
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lauflicht_10bit_loop+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lauflicht_10bit_loop+0x10>
  fa:	00 00       	nop
}

void lauflicht_10bit_loop() {
	_delay_ms(TIME_DELAY);
	//check if the left border is reached and change the direction to right
	if (BORDER_LEFT) {
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	85 30       	cpi	r24, 0x05	; 5
 100:	21 f4       	brne	.+8      	; 0x10a <lauflicht_10bit_loop+0x20>
		direction = RIGHT;
 102:	82 e7       	ldi	r24, 0x72	; 114
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 108:	26 c0       	rjmp	.+76     	; 0x156 <lauflicht_10bit_loop+0x6c>
	}
	//change the direction to left if the right border is reached
	else if (BORDER_RIGHT) {
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	21 f4       	brne	.+8      	; 0x118 <lauflicht_10bit_loop+0x2e>
		direction = LEFT;
 110:	8c e6       	ldi	r24, 0x6C	; 108
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 116:	1a c0       	rjmp	.+52     	; 0x14c <lauflicht_10bit_loop+0x62>
	}
	//check if transition state is reached. If so: toggle both of the Pins at the border between both of the registers
	else if (TRANSITION) {
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	90 78       	andi	r25, 0x80	; 128
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	89 2b       	or	r24, r25
 122:	81 f0       	breq	.+32     	; 0x144 <lauflicht_10bit_loop+0x5a>
		TOGGLE_PIN(PORTB, PORTB0);
 124:	95 b1       	in	r25, 0x05	; 5
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	89 27       	eor	r24, r25
 12a:	85 b9       	out	0x05, r24	; 5
		TOGGLE_PIN(PORTD, PORTD7);
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	80 58       	subi	r24, 0x80	; 128
 130:	8b b9       	out	0x0b, r24	; 11
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <lauflicht_10bit_loop+0x4e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lauflicht_10bit_loop+0x58>
 142:	00 00       	nop
		_delay_ms(TIME_DELAY);
	}
	//check the direction
	if (direction == LEFT) {
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 148:	8c 36       	cpi	r24, 0x6C	; 108
 14a:	19 f4       	brne	.+6      	; 0x152 <lauflicht_10bit_loop+0x68>
		moveLeft();
 14c:	0e 94 57 00 	call	0xae	; 0xae <moveLeft>
 150:	08 95       	ret
	}
	else if (direction == RIGHT) {
 152:	82 37       	cpi	r24, 0x72	; 114
 154:	11 f4       	brne	.+4      	; 0x15a <lauflicht_10bit_loop+0x70>
		moveRight();
 156:	0e 94 66 00 	call	0xcc	; 0xcc <moveRight>
 15a:	08 95       	ret

0000015c <main>:
	10-Bit Lauflicht. 2 Ports sind notwendig… gleicher Umfang wie Aufgabe 2
*/


int main(void) {
	lauflicht_10bit_init();
 15c:	0e 94 4b 00 	call	0x96	; 0x96 <lauflicht_10bit_init>
	
	while(1) {
		lauflicht_10bit_loop();
 160:	0e 94 75 00 	call	0xea	; 0xea <lauflicht_10bit_loop>
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0x4>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
