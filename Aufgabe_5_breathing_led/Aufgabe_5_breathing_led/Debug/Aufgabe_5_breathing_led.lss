
Aufgabe_5_breathing_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000824  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fe  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000321  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <startup>:

#include "breathingled.h"

void startup(){
	//sets PB1 as output
	SET_PIN_HIGH(DDRB,DDB1);
  80:	21 9a       	sbi	0x04, 1	; 4
	
	//sets PWM to 0
	OCR0A = 0;
  82:	17 bc       	out	0x27, r1	; 39

	//sets none-inverting Mode
	SET_PIN_HIGH(TCCR0A, COM0A1);
  84:	84 b5       	in	r24, 0x24	; 36
  86:	80 68       	ori	r24, 0x80	; 128
  88:	84 bd       	out	0x24, r24	; 36
	
	//sets fast PWM Mode
	SET_PIN_HIGH(TCCR0A, WGM01);
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	84 bd       	out	0x24, r24	; 36
	SET_PIN_HIGH(TCCR0A, WGM00);
  90:	84 b5       	in	r24, 0x24	; 36
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 bd       	out	0x24, r24	; 36
	SET_PIN_HIGH(TCCR0A, WGM02);
  96:	84 b5       	in	r24, 0x24	; 36
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	84 bd       	out	0x24, r24	; 36
	
	//sets prescaler to 8 and starts PWM
	SET_PIN_HIGH(TCCR0B, CS01);
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 bd       	out	0x25, r24	; 37
  a2:	08 95       	ret

000000a4 <mainloop>:
}

void mainloop(){
	//turning on the LED
	for(int i = 0; i <= MAXI; i++){
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
		OCR0A = i;
  a8:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e3       	ldi	r30, 0x3F	; 63
  ac:	fc e9       	ldi	r31, 0x9C	; 156
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <mainloop+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <mainloop+0x10>
  b4:	00 00       	nop
	SET_PIN_HIGH(TCCR0B, CS01);
}

void mainloop(){
	//turning on the LED
	for(int i = 0; i <= MAXI; i++){
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	81 15       	cp	r24, r1
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	9f 07       	cpc	r25, r31
  be:	a1 f7       	brne	.-24     	; 0xa8 <mainloop+0x4>
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(DELAY_DURATION);
	}
	
	//turning off the LED
	for(int i = MAXI; i >= 0; i--){
		OCR0A = i;
  c4:	87 bd       	out	0x27, r24	; 39
  c6:	ef e3       	ldi	r30, 0x3F	; 63
  c8:	fc e9       	ldi	r31, 0x9C	; 156
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <mainloop+0x26>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <mainloop+0x2c>
  d0:	00 00       	nop
		OCR0A = i;
		_delay_ms(DELAY_DURATION);
	}
	
	//turning off the LED
	for(int i = MAXI; i >= 0; i--){
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	b8 f7       	brcc	.-18     	; 0xc4 <mainloop+0x20>
		OCR0A = i;
		_delay_ms(DELAY_DURATION);
	}
  d6:	08 95       	ret

000000d8 <main>:
 */

#include "breathingled.h"

int main(void){
	startup();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <startup>
	
	while(1){
		mainloop();
  dc:	0e 94 52 00 	call	0xa4	; 0xa4 <mainloop>
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
