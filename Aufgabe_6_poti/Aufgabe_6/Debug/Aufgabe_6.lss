
Aufgabe_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095f  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081d  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d6  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000423  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "poti.h"


int main(void)
{
	init();
  a6:	0e 94 99 00 	call	0x132	; 0x132 <init>
    /* Replace with your application code */
    while (1) 
    {
		loop();
  aa:	0e 94 bc 00 	call	0x178	; 0x178 <loop>
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x4>

000000b0 <__vector_21>:

uint8_t usart_receive() {
	 while (!(UCSR0A & (1 << RXC0))); //BEQUATSCHEN
	 
	 return (uint8_t) UDR0;
 }
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <usart_init>:
  d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
  f2:	e2 ec       	ldi	r30, 0xC2	; 194
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <usart_send>:
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	95 ff       	sbrs	r25, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <usart_send+0x4>
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 112:	08 95       	ret

00000114 <usart_send_string>:
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
 11a:	88 81       	ld	r24, Y
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <usart_send_string+0x18>
 120:	21 96       	adiw	r28, 0x01	; 1
 122:	0e 94 82 00 	call	0x104	; 0x104 <usart_send>
 126:	89 91       	ld	r24, Y+
 128:	81 11       	cpse	r24, r1
 12a:	fb cf       	rjmp	.-10     	; 0x122 <usart_send_string+0xe>
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <init>:
 
void init() {
	ADMUX = 0;
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
	SET_PIN_HIGH(ADMUX, REFS0); // use AVcc as the reference
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
	//ADMUX |= (1 << REFS0);    // use AVcc as the reference

	SET_PIN_HIGH(ADCSRA, ADPS2); // 128 prescale for 16Mhz
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	84 60       	ori	r24, 0x04	; 4
 146:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS1); // 128 prescale for 16Mhz
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS0); // 128 prescale for 16Mhz
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADATE); // Set ADC Auto Trigger Enable
 154:	80 81       	ld	r24, Z
 156:	80 62       	ori	r24, 0x20	; 32
 158:	80 83       	st	Z, r24
	//ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
	//ADCSRA |= (1 << ADATE);   // Set ADC Auto Trigger Enable
		
	ADCSRB = 0;               // 0 for free running mode
 15a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	SET_PIN_HIGH(ADCSRA, ADEN); // Enable the ADC
 15e:	80 81       	ld	r24, Z
 160:	80 68       	ori	r24, 0x80	; 128
 162:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADIE); // Enable Interrupts
 164:	80 81       	ld	r24, Z
 166:	88 60       	ori	r24, 0x08	; 8
 168:	80 83       	st	Z, r24
	//ADCSRA |= (1 << ADEN);    // Enable the ADC
	//ADCSRA |= (1 << ADIE);    // Enable Interrupts

	SET_PIN_HIGH(ADCSRA, ADSC); // Start the ADC conversion
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
	//ADCSRA |= (1 << ADSC);    // Start the ADC conversion

	sei();
 170:	78 94       	sei

	usart_init();
 172:	0e 94 6c 00 	call	0xd8	; 0xd8 <usart_init>
 176:	08 95       	ret

00000178 <loop>:
}

void loop() {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	2a 97       	sbiw	r28, 0x0a	; 10
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(ADCvalue, buffer, 10);
 18c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 190:	4a e0       	ldi	r20, 0x0A	; 10
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	be 01       	movw	r22, r28
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <itoa>
	usart_send_string("Poti 1:  ");
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 8a 00 	call	0x114	; 0x114 <usart_send_string>
	usart_send_string(buffer);
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <usart_send_string>
	usart_send_string("\n\n");
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 8a 00 	call	0x114	; 0x114 <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	89 e6       	ldi	r24, 0x69	; 105
 1bc:	98 e1       	ldi	r25, 0x18	; 24
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <loop+0x46>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <loop+0x50>
 1c8:	00 00       	nop
	_delay_ms(500);
 1ca:	2a 96       	adiw	r28, 0x0a	; 10
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <itoa>:
 1dc:	45 32       	cpi	r20, 0x25	; 37
 1de:	51 05       	cpc	r21, r1
 1e0:	20 f4       	brcc	.+8      	; 0x1ea <itoa+0xe>
 1e2:	42 30       	cpi	r20, 0x02	; 2
 1e4:	10 f0       	brcs	.+4      	; 0x1ea <itoa+0xe>
 1e6:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__itoa_ncheck>
 1ea:	fb 01       	movw	r30, r22
 1ec:	10 82       	st	Z, r1
 1ee:	cb 01       	movw	r24, r22
 1f0:	08 95       	ret

000001f2 <__itoa_ncheck>:
 1f2:	bb 27       	eor	r27, r27
 1f4:	4a 30       	cpi	r20, 0x0A	; 10
 1f6:	31 f4       	brne	.+12     	; 0x204 <__itoa_ncheck+0x12>
 1f8:	99 23       	and	r25, r25
 1fa:	22 f4       	brpl	.+8      	; 0x204 <__itoa_ncheck+0x12>
 1fc:	bd e2       	ldi	r27, 0x2D	; 45
 1fe:	90 95       	com	r25
 200:	81 95       	neg	r24
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	0c 94 05 01 	jmp	0x20a	; 0x20a <__utoa_common>

00000208 <__utoa_ncheck>:
 208:	bb 27       	eor	r27, r27

0000020a <__utoa_common>:
 20a:	fb 01       	movw	r30, r22
 20c:	55 27       	eor	r21, r21
 20e:	aa 27       	eor	r26, r26
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	aa 1f       	adc	r26, r26
 216:	a4 17       	cp	r26, r20
 218:	10 f0       	brcs	.+4      	; 0x21e <__utoa_common+0x14>
 21a:	a4 1b       	sub	r26, r20
 21c:	83 95       	inc	r24
 21e:	50 51       	subi	r21, 0x10	; 16
 220:	b9 f7       	brne	.-18     	; 0x210 <__utoa_common+0x6>
 222:	a0 5d       	subi	r26, 0xD0	; 208
 224:	aa 33       	cpi	r26, 0x3A	; 58
 226:	08 f0       	brcs	.+2      	; 0x22a <__utoa_common+0x20>
 228:	a9 5d       	subi	r26, 0xD9	; 217
 22a:	a1 93       	st	Z+, r26
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	79 f7       	brne	.-34     	; 0x20e <__utoa_common+0x4>
 230:	b1 11       	cpse	r27, r1
 232:	b1 93       	st	Z+, r27
 234:	11 92       	st	Z+, r1
 236:	cb 01       	movw	r24, r22
 238:	0c 94 1e 01 	jmp	0x23c	; 0x23c <strrev>

0000023c <strrev>:
 23c:	dc 01       	movw	r26, r24
 23e:	fc 01       	movw	r30, r24
 240:	67 2f       	mov	r22, r23
 242:	71 91       	ld	r23, Z+
 244:	77 23       	and	r23, r23
 246:	e1 f7       	brne	.-8      	; 0x240 <strrev+0x4>
 248:	32 97       	sbiw	r30, 0x02	; 2
 24a:	04 c0       	rjmp	.+8      	; 0x254 <strrev+0x18>
 24c:	7c 91       	ld	r23, X
 24e:	6d 93       	st	X+, r22
 250:	70 83       	st	Z, r23
 252:	62 91       	ld	r22, -Z
 254:	ae 17       	cp	r26, r30
 256:	bf 07       	cpc	r27, r31
 258:	c8 f3       	brcs	.-14     	; 0x24c <strrev+0x10>
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
