
Aufgabe_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f8  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046c  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000193  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

	Ausgabe auf 10 Bit mit Poti
*/

int main(void) {
	analog_init();
  a6:	0e 94 72 00 	call	0xe4	; 0xe4 <analog_init>

    while (1) {
		analog_loop();
  aa:	0e 94 95 00 	call	0x12a	; 0x12a <analog_loop>
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x4>

000000b0 <__vector_21>:
#include "custom_utilities.h"

volatile uint16_t ADCmeasurement;


ISR(ADC_vect) {	
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
		pushing around for 10 Bit
		to concat bits correctly
		ADCH		ADCL
		1111 1111   11
	*/
	ADCmeasurement = ADCL | (ADCH << 8);
  c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	92 2b       	or	r25, r18
  cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
  d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <analog_init>:
 
void analog_init() { 
	// to read A0
	ADMUX = 0;
  e4:	ec e7       	ldi	r30, 0x7C	; 124
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1

	// use AVcc as the reference
	SET_PIN_HIGH(ADMUX, REFS0);		
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
	
	// set prescaler to 128 for 16Mhz
	SET_PIN_HIGH(ADCSRA, ADPS2);
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS1);
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS0);
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24

	// Set ADC Auto Trigger Enable
	SET_PIN_HIGH(ADCSRA, ADATE);
 106:	80 81       	ld	r24, Z
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	80 83       	st	Z, r24
	
	// 0 for free running mode
	ADCSRB = 0;               
 10c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	// Enable the ADC
	SET_PIN_HIGH(ADCSRA, ADEN); 
 110:	80 81       	ld	r24, Z
 112:	80 68       	ori	r24, 0x80	; 128
 114:	80 83       	st	Z, r24
	// Enable Interrupts
	SET_PIN_HIGH(ADCSRA, ADIE); 
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24

	// Start the ADC conversion
	SET_PIN_HIGH(ADCSRA, ADSC); 
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24

	sei();
 122:	78 94       	sei

	usart_init();
 124:	0e 94 c8 00 	call	0x190	; 0x190 <usart_init>
 128:	08 95       	ret

0000012a <analog_loop>:
}

void analog_loop() {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2a 97       	sbiw	r28, 0x0a	; 10
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(ADCmeasurement, buffer, 10);
 13e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 142:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	0e 94 f5 00 	call	0x1ea	; 0x1ea <itoa>

	usart_send_string("Poti 1:  ");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 e6 00 	call	0x1cc	; 0x1cc <usart_send_string>
	usart_send_string(buffer);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 e6 00 	call	0x1cc	; 0x1cc <usart_send_string>
	usart_send_string("\n\r"); 
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 e6 00 	call	0x1cc	; 0x1cc <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	98 e1       	ldi	r25, 0x18	; 24
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <analog_loop+0x48>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <analog_loop+0x52>
 17c:	00 00       	nop

	_delay_ms(SERIAL_DELAY);
 17e:	2a 96       	adiw	r28, 0x0a	; 10
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <usart_init>:
#include "USART.h"
#include "custom_utilities.h"


void usart_init() {
	UBRR0H  = (MYUBRR << 8);
 190:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L  =  MYUBRR;
 194:	87 e6       	ldi	r24, 0x67	; 103
 196:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// enable receiver and transmitter
	SET_PIN_HIGH(UCSR0B, RXEN0);	
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	80 83       	st	Z, r24
	SET_PIN_HIGH(UCSR0B, TXEN0);
 1a4:	80 81       	ld	r24, Z
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 83       	st	Z, r24

	// set frame 8data, 1stp
	SET_PIN_HIGH(UCSR0C, UCSZ01);	
 1aa:	e2 ec       	ldi	r30, 0xC2	; 194
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	80 83       	st	Z, r24
	SET_PIN_HIGH(UCSR0C, UCSZ00);
 1b4:	80 81       	ld	r24, Z
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret

000001bc <usart_send>:
}

void usart_send(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 1bc:	e0 ec       	ldi	r30, 0xC0	; 192
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	95 ff       	sbrs	r25, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <usart_send+0x4>
	
	UDR0 = data;
 1c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1ca:	08 95       	ret

000001cc <usart_send_string>:
}

void usart_send_string(char* data) {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
	for (int i = 0; ; i++) {
		if (data[i] == 0) {
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <usart_send_string+0x18>
 1d8:	21 96       	adiw	r28, 0x01	; 1
			break;
		}
		
		usart_send(data[i]);
 1da:	0e 94 de 00 	call	0x1bc	; 0x1bc <usart_send>
	UDR0 = data;
}

void usart_send_string(char* data) {
	for (int i = 0; ; i++) {
		if (data[i] == 0) {
 1de:	89 91       	ld	r24, Y+
 1e0:	81 11       	cpse	r24, r1
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <usart_send_string+0xe>
			break;
		}
		
		usart_send(data[i]);
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <itoa>:
 1ea:	45 32       	cpi	r20, 0x25	; 37
 1ec:	51 05       	cpc	r21, r1
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <itoa+0xe>
 1f0:	42 30       	cpi	r20, 0x02	; 2
 1f2:	10 f0       	brcs	.+4      	; 0x1f8 <itoa+0xe>
 1f4:	0c 94 00 01 	jmp	0x200	; 0x200 <__itoa_ncheck>
 1f8:	fb 01       	movw	r30, r22
 1fa:	10 82       	st	Z, r1
 1fc:	cb 01       	movw	r24, r22
 1fe:	08 95       	ret

00000200 <__itoa_ncheck>:
 200:	bb 27       	eor	r27, r27
 202:	4a 30       	cpi	r20, 0x0A	; 10
 204:	31 f4       	brne	.+12     	; 0x212 <__itoa_ncheck+0x12>
 206:	99 23       	and	r25, r25
 208:	22 f4       	brpl	.+8      	; 0x212 <__itoa_ncheck+0x12>
 20a:	bd e2       	ldi	r27, 0x2D	; 45
 20c:	90 95       	com	r25
 20e:	81 95       	neg	r24
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	0c 94 0c 01 	jmp	0x218	; 0x218 <__utoa_common>

00000216 <__utoa_ncheck>:
 216:	bb 27       	eor	r27, r27

00000218 <__utoa_common>:
 218:	fb 01       	movw	r30, r22
 21a:	55 27       	eor	r21, r21
 21c:	aa 27       	eor	r26, r26
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	aa 1f       	adc	r26, r26
 224:	a4 17       	cp	r26, r20
 226:	10 f0       	brcs	.+4      	; 0x22c <__utoa_common+0x14>
 228:	a4 1b       	sub	r26, r20
 22a:	83 95       	inc	r24
 22c:	50 51       	subi	r21, 0x10	; 16
 22e:	b9 f7       	brne	.-18     	; 0x21e <__utoa_common+0x6>
 230:	a0 5d       	subi	r26, 0xD0	; 208
 232:	aa 33       	cpi	r26, 0x3A	; 58
 234:	08 f0       	brcs	.+2      	; 0x238 <__utoa_common+0x20>
 236:	a9 5d       	subi	r26, 0xD9	; 217
 238:	a1 93       	st	Z+, r26
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	79 f7       	brne	.-34     	; 0x21c <__utoa_common+0x4>
 23e:	b1 11       	cpse	r27, r1
 240:	b1 93       	st	Z+, r27
 242:	11 92       	st	Z+, r1
 244:	cb 01       	movw	r24, r22
 246:	0c 94 25 01 	jmp	0x24a	; 0x24a <strrev>

0000024a <strrev>:
 24a:	dc 01       	movw	r26, r24
 24c:	fc 01       	movw	r30, r24
 24e:	67 2f       	mov	r22, r23
 250:	71 91       	ld	r23, Z+
 252:	77 23       	and	r23, r23
 254:	e1 f7       	brne	.-8      	; 0x24e <strrev+0x4>
 256:	32 97       	sbiw	r30, 0x02	; 2
 258:	04 c0       	rjmp	.+8      	; 0x262 <strrev+0x18>
 25a:	7c 91       	ld	r23, X
 25c:	6d 93       	st	X+, r22
 25e:	70 83       	st	Z, r23
 260:	62 91       	ld	r22, -Z
 262:	ae 17       	cp	r26, r30
 264:	bf 07       	cpc	r27, r31
 266:	c8 f3       	brcs	.-14     	; 0x25a <strrev+0x10>
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
