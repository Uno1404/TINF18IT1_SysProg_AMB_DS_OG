
Aufgabe_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081d  00000000  00000000  00000d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000402  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000179  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
uint8_t usart_receive()
 {
	 while (!(UCSR0A & (1 << RXC0))); //BEQUATSCHEN
	 
	 return (uint8_t) UDR0;
 }
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  b6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADCvalue>
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <usart_init>:
  c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  d0:	e1 ec       	ldi	r30, 0xC1	; 193
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	80 83       	st	Z, r24
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	80 83       	st	Z, r24
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <usart_send>:
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <usart_send+0x4>
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 100:	08 95       	ret

00000102 <usart_send_string>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <usart_send_string+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	0e 94 79 00 	call	0xf2	; 0xf2 <usart_send>
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <usart_send_string+0xe>
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <init>:
 
void init(){
		ADMUX = 0;
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
		SET_PIN_HIGH(ADMUX, REFS0); // use AVcc as the reference
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
		//ADMUX |= (1 << REFS0);    // use AVcc as the reference

		SET_PIN_HIGH(ADMUX, ADLAR);
 12c:	80 81       	ld	r24, Z
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	80 83       	st	Z, r24
		
		SET_PIN_HIGH(ADCSRA, ADPS2); // 128 prescale for 16Mhz
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	80 83       	st	Z, r24
		SET_PIN_HIGH(ADCSRA, ADPS1); // 128 prescale for 16Mhz
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
		SET_PIN_HIGH(ADCSRA, ADPS0); // 128 prescale for 16Mhz
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24
		SET_PIN_HIGH(ADCSRA, ADATE); // Set ADC Auto Trigger Enable
 148:	80 81       	ld	r24, Z
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	80 83       	st	Z, r24
		//ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
		//ADCSRA |= (1 << ADATE);   // Set ADC Auto Trigger Enable
		
		ADCSRB = 0;               // 0 for free running mode
 14e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

		SET_PIN_HIGH(ADCSRA, ADEN); // Enable the ADC
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
		SET_PIN_HIGH(ADCSRA, ADIE); // Enable Interrupts
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
		//ADCSRA |= (1 << ADEN);    // Enable the ADC
		//ADCSRA |= (1 << ADIE);    // Enable Interrupts

		SET_PIN_HIGH(ADCSRA, ADSC); // Start the ADC conversion
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
		//ADCSRA |= (1 << ADSC);    // Start the ADC conversion

		sei();
 164:	78 94       	sei

		usart_init();
 166:	0e 94 63 00 	call	0xc6	; 0xc6 <usart_init>
 16a:	08 95       	ret

0000016c <loop>:
}

void loop(){
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	2a 97       	sbiw	r28, 0x0a	; 10
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
			char buffer[10];
			itoa(ADCvalue, buffer, 10);
 180:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADCvalue>
 184:	4a e0       	ldi	r20, 0x0A	; 10
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	be 01       	movw	r22, r28
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 ff 00 	call	0x1fe	; 0x1fe <itoa>
			if (step&1){
 194:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 198:	80 ff       	sbrs	r24, 0
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <loop+0x3a>
				usart_send_string("Poti 1:  ");
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 81 00 	call	0x102	; 0x102 <usart_send_string>
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <loop+0x42>
			}
			else{
				usart_send_string("Poti 2:  ");
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 81 00 	call	0x102	; 0x102 <usart_send_string>
			}
			usart_send_string(buffer);
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	0e 94 81 00 	call	0x102	; 0x102 <usart_send_string>
			usart_send_string("\n\n");
 1b6:	84 e1       	ldi	r24, 0x14	; 20
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 81 00 	call	0x102	; 0x102 <usart_send_string>
			ADMUX = ADMUX ^1;
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 27       	eor	r24, r25
 1c8:	80 83       	st	Z, r24
			step = ADMUX;
 1ca:	80 81       	ld	r24, Z
 1cc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	2f e9       	ldi	r18, 0x9F	; 159
 1d2:	86 e8       	ldi	r24, 0x86	; 134
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <loop+0x6a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <loop+0x74>
 1e0:	00 00       	nop
			_delay_ms(500);
 1e2:	2a 96       	adiw	r28, 0x0a	; 10
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:

#include "double_poti.h"

int main(void)
{
    init();
 1f4:	0e 94 90 00 	call	0x120	; 0x120 <init>
    while (1) 
    {
		loop();
 1f8:	0e 94 b6 00 	call	0x16c	; 0x16c <loop>
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <main+0x4>

000001fe <itoa>:
 1fe:	45 32       	cpi	r20, 0x25	; 37
 200:	51 05       	cpc	r21, r1
 202:	20 f4       	brcc	.+8      	; 0x20c <itoa+0xe>
 204:	42 30       	cpi	r20, 0x02	; 2
 206:	10 f0       	brcs	.+4      	; 0x20c <itoa+0xe>
 208:	0c 94 0a 01 	jmp	0x214	; 0x214 <__itoa_ncheck>
 20c:	fb 01       	movw	r30, r22
 20e:	10 82       	st	Z, r1
 210:	cb 01       	movw	r24, r22
 212:	08 95       	ret

00000214 <__itoa_ncheck>:
 214:	bb 27       	eor	r27, r27
 216:	4a 30       	cpi	r20, 0x0A	; 10
 218:	31 f4       	brne	.+12     	; 0x226 <__itoa_ncheck+0x12>
 21a:	99 23       	and	r25, r25
 21c:	22 f4       	brpl	.+8      	; 0x226 <__itoa_ncheck+0x12>
 21e:	bd e2       	ldi	r27, 0x2D	; 45
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	0c 94 16 01 	jmp	0x22c	; 0x22c <__utoa_common>

0000022a <__utoa_ncheck>:
 22a:	bb 27       	eor	r27, r27

0000022c <__utoa_common>:
 22c:	fb 01       	movw	r30, r22
 22e:	55 27       	eor	r21, r21
 230:	aa 27       	eor	r26, r26
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	aa 1f       	adc	r26, r26
 238:	a4 17       	cp	r26, r20
 23a:	10 f0       	brcs	.+4      	; 0x240 <__utoa_common+0x14>
 23c:	a4 1b       	sub	r26, r20
 23e:	83 95       	inc	r24
 240:	50 51       	subi	r21, 0x10	; 16
 242:	b9 f7       	brne	.-18     	; 0x232 <__utoa_common+0x6>
 244:	a0 5d       	subi	r26, 0xD0	; 208
 246:	aa 33       	cpi	r26, 0x3A	; 58
 248:	08 f0       	brcs	.+2      	; 0x24c <__utoa_common+0x20>
 24a:	a9 5d       	subi	r26, 0xD9	; 217
 24c:	a1 93       	st	Z+, r26
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	79 f7       	brne	.-34     	; 0x230 <__utoa_common+0x4>
 252:	b1 11       	cpse	r27, r1
 254:	b1 93       	st	Z+, r27
 256:	11 92       	st	Z+, r1
 258:	cb 01       	movw	r24, r22
 25a:	0c 94 2f 01 	jmp	0x25e	; 0x25e <strrev>

0000025e <strrev>:
 25e:	dc 01       	movw	r26, r24
 260:	fc 01       	movw	r30, r24
 262:	67 2f       	mov	r22, r23
 264:	71 91       	ld	r23, Z+
 266:	77 23       	and	r23, r23
 268:	e1 f7       	brne	.-8      	; 0x262 <strrev+0x4>
 26a:	32 97       	sbiw	r30, 0x02	; 2
 26c:	04 c0       	rjmp	.+8      	; 0x276 <strrev+0x18>
 26e:	7c 91       	ld	r23, X
 270:	6d 93       	st	X+, r22
 272:	70 83       	st	Z, r23
 274:	62 91       	ld	r22, -Z
 276:	ae 17       	cp	r26, r30
 278:	bf 07       	cpc	r27, r31
 27a:	c8 f3       	brcs	.-14     	; 0x26e <strrev+0x10>
 27c:	08 95       	ret

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
