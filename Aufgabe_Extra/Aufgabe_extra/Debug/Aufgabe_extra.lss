
Aufgabe_extra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800122  00800122  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aab  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d6  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e9  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000023f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:

volatile uint16_t ADCmeasurement = 0;
volatile int Button_press = 0;
uint8_t step = 0;

ISR(ADC_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	ADCmeasurement = ADCL | (ADCH << 8);
  b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ba:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	92 2b       	or	r25, r18
  c2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ADCmeasurement+0x1>
  c6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ADCmeasurement>
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_1>:

ISR (INT0_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	Button_press ^= 1;
  ea:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Button_press>
  ee:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Button_press+0x1>
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	82 27       	eor	r24, r18
  f6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <Button_press+0x1>
  fa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <Button_press>
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <init>:
 
void init() {
	ADMUX = 0;
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
	// use AVcc as the reference
	SET_PIN_HIGH(ADMUX, REFS0); 
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
	//SET_PIN_HIGH(ADMUX, ADLAR);
		
	// 128 prescale for 16Mhz
	SET_PIN_HIGH(ADCSRA, ADPS2); 
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS1); 
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS0); 
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24

	// Set ADC Auto Trigger Enable
	SET_PIN_HIGH(ADCSRA, ADATE); 
 130:	80 81       	ld	r24, Z
 132:	80 62       	ori	r24, 0x20	; 32
 134:	80 83       	st	Z, r24
		
	// 0 for free running mode
	ADCSRB = 0;               
 136:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	// Enable the ADC
	SET_PIN_HIGH(ADCSRA, ADEN); 
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	80 83       	st	Z, r24
	// Enable Interrupts
	SET_PIN_HIGH(ADCSRA, ADIE); 
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 83       	st	Z, r24

	// Start the ADC conversion
	SET_PIN_HIGH(ADCSRA, ADSC); 
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24

	//Button press
	SET_PIN_LOW(DDRD, DDD2);        // Clear the PD2 pin for PD2
 14c:	52 98       	cbi	0x0a, 2	; 10
	    
	SET_PIN_HIGH(PORTD, PORTD2);    // turn On the Pull-up for PD2
 14e:	5a 9a       	sbi	0x0b, 2	; 11
	    
	SET_PIN_HIGH(EICRA, ISC00);        // set INT0 to trigger on ANY logic
 150:	e9 e6       	ldi	r30, 0x69	; 105
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
	SET_PIN_HIGH(EIMSK, INT0);        // Turns on INT0
 15a:	e8 9a       	sbi	0x1d, 0	; 29
		
	sei();
 15c:	78 94       	sei

	usart_init();
 15e:	0e 94 0f 01 	call	0x21e	; 0x21e <usart_init>
 162:	08 95       	ret

00000164 <loop>:
}

void loop(){
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	2a 97       	sbiw	r28, 0x0a	; 10
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(ADCmeasurement, buffer, 10);
 178:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ADCmeasurement>
 17c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ADCmeasurement+0x1>
 180:	4a e0       	ldi	r20, 0x0A	; 10
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	be 01       	movw	r22, r28
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	0e 94 3c 01 	call	0x278	; 0x278 <itoa>
	if (step&1){
 18e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 192:	80 ff       	sbrs	r24, 0
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <loop+0x3c>
		usart_send_string("Poti 1:  ");
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_string>
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <loop+0x44>
	}
	else{
		usart_send_string("Poti 2:  ");
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_string>
	}
	usart_send_string(buffer);
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_string>
	itoa(Button_press, buffer, 10);
 1b0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Button_press>
 1b4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Button_press+0x1>
 1b8:	4a e0       	ldi	r20, 0x0A	; 10
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	be 01       	movw	r22, r28
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	0e 94 3c 01 	call	0x278	; 0x278 <itoa>
	usart_send_string("\n\rButton: ");
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_string>
	usart_send_string(buffer);
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_string>
	usart_send_string("\n\r");
 1d6:	8f e1       	ldi	r24, 0x1F	; 31
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_string>
	ADMUX = ADMUX ^1;
 1de:	ec e7       	ldi	r30, 0x7C	; 124
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	90 81       	ld	r25, Z
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	89 27       	eor	r24, r25
 1e8:	80 83       	st	Z, r24
	step = ADMUX;
 1ea:	80 81       	ld	r24, Z
 1ec:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	89 e6       	ldi	r24, 0x69	; 105
 1f4:	98 e1       	ldi	r25, 0x18	; 24
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <loop+0x92>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <loop+0x9c>
 200:	00 00       	nop
	_delay_ms(TIME_DELAY);
 202:	2a 96       	adiw	r28, 0x0a	; 10
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:
 */

#include "double_poti.h"

int main(void) {
    init();
 214:	0e 94 87 00 	call	0x10e	; 0x10e <init>
	
    while (1) {
		loop();
 218:	0e 94 b2 00 	call	0x164	; 0x164 <loop>
 21c:	fd cf       	rjmp	.-6      	; 0x218 <main+0x4>

0000021e <usart_init>:
#include "USART.h"
#include "custom_utilities.h"


void usart_init() {
	UBRR0H  = (MYUBRR << 8);
 21e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L  =  MYUBRR;
 222:	87 e6       	ldi	r24, 0x67	; 103
 224:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// enable receiver and transmitter
	SET_PIN_HIGH(UCSR0B, RXEN0);	
 228:	e1 ec       	ldi	r30, 0xC1	; 193
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	80 83       	st	Z, r24
	SET_PIN_HIGH(UCSR0B, TXEN0);
 232:	80 81       	ld	r24, Z
 234:	88 60       	ori	r24, 0x08	; 8
 236:	80 83       	st	Z, r24

	// set frame 8data, 1stp
	SET_PIN_HIGH(UCSR0C, UCSZ01);	
 238:	e2 ec       	ldi	r30, 0xC2	; 194
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	80 83       	st	Z, r24
	SET_PIN_HIGH(UCSR0C, UCSZ00);
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <usart_send>:
}

void usart_send(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	90 81       	ld	r25, Z
 250:	95 ff       	sbrs	r25, 5
 252:	fd cf       	rjmp	.-6      	; 0x24e <usart_send+0x4>
	
	UDR0 = data;
 254:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 258:	08 95       	ret

0000025a <usart_send_string>:
}

void usart_send_string(char* data) {
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
	for (int i = 0; ; i++) {
		if (data[i] == 0) {
 260:	88 81       	ld	r24, Y
 262:	88 23       	and	r24, r24
 264:	31 f0       	breq	.+12     	; 0x272 <usart_send_string+0x18>
 266:	21 96       	adiw	r28, 0x01	; 1
			break;
		}
		
		usart_send(data[i]);
 268:	0e 94 25 01 	call	0x24a	; 0x24a <usart_send>
	UDR0 = data;
}

void usart_send_string(char* data) {
	for (int i = 0; ; i++) {
		if (data[i] == 0) {
 26c:	89 91       	ld	r24, Y+
 26e:	81 11       	cpse	r24, r1
 270:	fb cf       	rjmp	.-10     	; 0x268 <usart_send_string+0xe>
			break;
		}
		
		usart_send(data[i]);
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <itoa>:
 278:	45 32       	cpi	r20, 0x25	; 37
 27a:	51 05       	cpc	r21, r1
 27c:	20 f4       	brcc	.+8      	; 0x286 <itoa+0xe>
 27e:	42 30       	cpi	r20, 0x02	; 2
 280:	10 f0       	brcs	.+4      	; 0x286 <itoa+0xe>
 282:	0c 94 47 01 	jmp	0x28e	; 0x28e <__itoa_ncheck>
 286:	fb 01       	movw	r30, r22
 288:	10 82       	st	Z, r1
 28a:	cb 01       	movw	r24, r22
 28c:	08 95       	ret

0000028e <__itoa_ncheck>:
 28e:	bb 27       	eor	r27, r27
 290:	4a 30       	cpi	r20, 0x0A	; 10
 292:	31 f4       	brne	.+12     	; 0x2a0 <__itoa_ncheck+0x12>
 294:	99 23       	and	r25, r25
 296:	22 f4       	brpl	.+8      	; 0x2a0 <__itoa_ncheck+0x12>
 298:	bd e2       	ldi	r27, 0x2D	; 45
 29a:	90 95       	com	r25
 29c:	81 95       	neg	r24
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__utoa_common>

000002a4 <__utoa_ncheck>:
 2a4:	bb 27       	eor	r27, r27

000002a6 <__utoa_common>:
 2a6:	fb 01       	movw	r30, r22
 2a8:	55 27       	eor	r21, r21
 2aa:	aa 27       	eor	r26, r26
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	aa 1f       	adc	r26, r26
 2b2:	a4 17       	cp	r26, r20
 2b4:	10 f0       	brcs	.+4      	; 0x2ba <__utoa_common+0x14>
 2b6:	a4 1b       	sub	r26, r20
 2b8:	83 95       	inc	r24
 2ba:	50 51       	subi	r21, 0x10	; 16
 2bc:	b9 f7       	brne	.-18     	; 0x2ac <__utoa_common+0x6>
 2be:	a0 5d       	subi	r26, 0xD0	; 208
 2c0:	aa 33       	cpi	r26, 0x3A	; 58
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <__utoa_common+0x20>
 2c4:	a9 5d       	subi	r26, 0xD9	; 217
 2c6:	a1 93       	st	Z+, r26
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	79 f7       	brne	.-34     	; 0x2aa <__utoa_common+0x4>
 2cc:	b1 11       	cpse	r27, r1
 2ce:	b1 93       	st	Z+, r27
 2d0:	11 92       	st	Z+, r1
 2d2:	cb 01       	movw	r24, r22
 2d4:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <strrev>

000002d8 <strrev>:
 2d8:	dc 01       	movw	r26, r24
 2da:	fc 01       	movw	r30, r24
 2dc:	67 2f       	mov	r22, r23
 2de:	71 91       	ld	r23, Z+
 2e0:	77 23       	and	r23, r23
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <strrev+0x4>
 2e4:	32 97       	sbiw	r30, 0x02	; 2
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <strrev+0x18>
 2e8:	7c 91       	ld	r23, X
 2ea:	6d 93       	st	X+, r22
 2ec:	70 83       	st	Z, r23
 2ee:	62 91       	ld	r22, -Z
 2f0:	ae 17       	cp	r26, r30
 2f2:	bf 07       	cpc	r27, r31
 2f4:	c8 f3       	brcs	.-14     	; 0x2e8 <strrev+0x10>
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
