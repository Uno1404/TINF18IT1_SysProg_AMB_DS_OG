
Aufgabe_extra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800106  00800106  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1b  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  00001143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d9  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039c  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 02 	call	0x44e	; 0x44e <main>
  9e:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pwm_pins_init>:
*/
void pwm_pins_init() {	
	// set the timer
	uint16_t time = 0x01FF;			// 511
	// split up the 16 bit time variable to two 8 bit registers
	OCR1A = (uint8_t) time;			
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = (uint8_t)(time >> 8);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  ba:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	
	// set timer mode to CTC
	SET_PIN_HIGH(TCCR1A, WGM11);
  be:	e0 e8       	ldi	r30, 0x80	; 128
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24

	// set the ISR COMPA vect (interrupt)
	SET_PIN_HIGH(TIMSK1, OCIE1A);
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24

	// set prescaler to 0 and start timer
	SET_PIN_HIGH(TCCR1B, CS10);
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
	
	// get addresses from ports
	portContainerArray[0].destination_port = &PORTD;
  dc:	ad e0       	ldi	r26, 0x0D	; 13
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	8b e2       	ldi	r24, 0x2B	; 43
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	9c 93       	st	X, r25
  e8:	8e 93       	st	-X, r24
	portContainerArray[0].portBits = 0x00;
  ea:	12 96       	adiw	r26, 0x02	; 2
  ec:	1c 92       	st	X, r1
  ee:	12 97       	sbiw	r26, 0x02	; 2
	portContainerArray[1].destination_port = &PORTB;
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	14 96       	adiw	r26, 0x04	; 4
  f6:	9c 93       	st	X, r25
  f8:	8e 93       	st	-X, r24
  fa:	13 97       	sbiw	r26, 0x03	; 3
	portContainerArray[1].portBits = 0x00;
  fc:	15 96       	adiw	r26, 0x05	; 5
  fe:	1c 92       	st	X, r1
 100:	15 97       	sbiw	r26, 0x05	; 5

	// set pwm pins 
	pins[0].targetPortContainer = portContainerArray;
 102:	e3 e1       	ldi	r30, 0x13	; 19
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	b1 83       	std	Z+1, r27	; 0x01
 108:	a0 83       	st	Z, r26
	pins[0].bit_in_register = (1 << PORTD3);
 10a:	28 e0       	ldi	r18, 0x08	; 8
 10c:	22 83       	std	Z+2, r18	; 0x02
	pins[1].targetPortContainer = portContainerArray;
 10e:	b4 83       	std	Z+4, r27	; 0x04
 110:	a3 83       	std	Z+3, r26	; 0x03
	pins[1].bit_in_register = (1 << PORTD5);
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	85 83       	std	Z+5, r24	; 0x05
	pins[2].targetPortContainer = portContainerArray;
 116:	b7 83       	std	Z+7, r27	; 0x07
 118:	a6 83       	std	Z+6, r26	; 0x06
	pins[2].bit_in_register = (1 << PORTD6);
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	80 87       	std	Z+8, r24	; 0x08
	pins[3].targetPortContainer = portContainerArray+1;
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	92 87       	std	Z+10, r25	; 0x0a
 124:	81 87       	std	Z+9, r24	; 0x09
	pins[3].bit_in_register = (1 << PORTB1);
 126:	32 e0       	ldi	r19, 0x02	; 2
 128:	33 87       	std	Z+11, r19	; 0x0b
	pins[4].targetPortContainer = portContainerArray+1;
 12a:	95 87       	std	Z+13, r25	; 0x0d
 12c:	84 87       	std	Z+12, r24	; 0x0c
	pins[4].bit_in_register = (1 << PORTB2);
 12e:	34 e0       	ldi	r19, 0x04	; 4
 130:	36 87       	std	Z+14, r19	; 0x0e
	pins[5].targetPortContainer = portContainerArray+1;
 132:	90 8b       	std	Z+16, r25	; 0x10
 134:	87 87       	std	Z+15, r24	; 0x0f
	pins[5].bit_in_register = (1 << PORTB3);
 136:	21 8b       	std	Z+17, r18	; 0x11
	
	// set the two Data Direction Registers accordingly
	DDRD |= 0b01101000;
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	88 66       	ori	r24, 0x68	; 104
 13c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00001110;
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8e 60       	ori	r24, 0x0E	; 14
 142:	84 b9       	out	0x04, r24	; 4
	
	// turn all LEDS off
	for (int i = 0; i < PWM_PINS; ++i) {
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
/* sets the pin in the cache byte to HIGH or LOW
	id	  = pin number
	level = HIGH or LOW
*/
inline void set_pin_active(uint8_t id, bool state) {
	PIN* target_pin = pins + id;	// get the correct pin
 148:	fc 01       	movw	r30, r24
 14a:	ff 27       	eor	r31, r31
 14c:	9f 01       	movw	r18, r30
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	e2 0f       	add	r30, r18
 154:	f3 1f       	adc	r31, r19
 156:	ed 5e       	subi	r30, 0xED	; 237
 158:	fe 4f       	sbci	r31, 0xFE	; 254
	if (state) {
		target_pin->targetPortContainer->portBits |=  (target_pin->bit_in_register);	// sets the specified bit accordingly
	}
	else {
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);	// clears the specified bit accordingly
 15a:	a0 81       	ld	r26, Z
 15c:	b1 81       	ldd	r27, Z+1	; 0x01
 15e:	12 96       	adiw	r26, 0x02	; 2
 160:	3c 91       	ld	r19, X
 162:	12 97       	sbiw	r26, 0x02	; 2
 164:	22 81       	ldd	r18, Z+2	; 0x02
 166:	20 95       	com	r18
 168:	23 23       	and	r18, r19
 16a:	12 96       	adiw	r26, 0x02	; 2
 16c:	2c 93       	st	X, r18
	// set the two Data Direction Registers accordingly
	DDRD |= 0b01101000;
	DDRB |= 0b00001110;
	
	// turn all LEDS off
	for (int i = 0; i < PWM_PINS; ++i) {
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	86 30       	cpi	r24, 0x06	; 6
 172:	91 05       	cpc	r25, r1
 174:	49 f7       	brne	.-46     	; 0x148 <pwm_pins_init+0xa2>
	level = HIGH or LOW
*/
inline void set_pin_active(uint8_t id, bool state) {
	PIN* target_pin = pins + id;	// get the correct pin
	if (state) {
		target_pin->targetPortContainer->portBits |=  (target_pin->bit_in_register);	// sets the specified bit accordingly
 176:	a3 e1       	ldi	r26, 0x13	; 19
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	92 81       	ldd	r25, Z+2	; 0x02
 182:	12 96       	adiw	r26, 0x02	; 2
 184:	8c 91       	ld	r24, X
 186:	89 2b       	or	r24, r25
 188:	82 83       	std	Z+2, r24	; 0x02
 18a:	08 95       	ret

0000018c <analog_init>:


// init analog stuff
void analog_init() {
	// A0
	ADMUX = 0;
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	10 82       	st	Z, r1
	
	// use AVcc as the reference
	SET_PIN_HIGH(ADMUX, REFS0);
 192:	80 81       	ld	r24, Z
 194:	80 64       	ori	r24, 0x40	; 64
 196:	80 83       	st	Z, r24
	
	// prescale to 128 for 16Mhz
	SET_PIN_HIGH(ADCSRA, ADPS2);
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS1);
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS0);
 1a8:	80 81       	ld	r24, Z
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	80 83       	st	Z, r24

	// Set ADC Auto Trigger Enable
	SET_PIN_HIGH(ADCSRA, ADATE);
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
	
	// LOW (0) for free running mode
	ADCSRB = LOW;
 1b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	// Enable the ADC (Analog Device Converter)
	SET_PIN_HIGH(ADCSRA, ADEN);
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
	
	// Enable Interrupts
	SET_PIN_HIGH(ADCSRA, ADIE);
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 83       	st	Z, r24

	// Start the ADC conversion
	SET_PIN_HIGH(ADCSRA, ADSC);
 1c4:	80 81       	ld	r24, Z
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <__vector_21>:
}

// Interrupt: Analog read
ISR(ADC_vect) {
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	if ((ADMUX & 0x0F) == X_PIN) {			// if X_PIN was read
 1ea:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	89 f4       	brne	.+34     	; 0x216 <__vector_21+0x4a>
		ADC_X = (ADCL | (ADCH << 8)) - 512;	// set ADC_X and normalize it to 0 by subtracting 512 (middle pos = 0)
 1f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1f8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	92 2b       	or	r25, r18
 200:	92 50       	subi	r25, 0x02	; 2
 202:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_X+0x1>
 206:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_X>
		ADMUX = (ADMUX & 0xF0) | Y_PIN;		// set ADMUX to PIN_Y
 20a:	ec e7       	ldi	r30, 0x7C	; 124
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	80 83       	st	Z, r24
 214:	1c c0       	rjmp	.+56     	; 0x24e <__vector_21+0x82>
	}
	else {									// else Y_PIN was read
		ADC_Y = (ADCL | (ADCH << 8));		// set ADC_Y
 216:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 21a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	92 2b       	or	r25, r18
 222:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_Y+0x1>
 226:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_Y>
		percent = ADC_Y / 5;				// scale the brightness
 22a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_Y>
 22e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ADC_Y+0x1>
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 23a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <percent+0x1>
 23e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <percent>
		ADMUX = (ADMUX & 0xF0) | X_PIN;		// set ADMUX to PIN_X
 242:	ec e7       	ldi	r30, 0x7C	; 124
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	80 83       	st	Z, r24
	}
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_11>:


// Interrupt: Timer overflow -> PWM 
ISR (TIMER1_COMPA_vect)	{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	counter++;
 292:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 296:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 2a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if(counter >= budget)
 2a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2ac:	82 17       	cp	r24, r18
 2ae:	93 07       	cpc	r25, r19
 2b0:	20 f0       	brcs	.+8      	; 0x2ba <__vector_11+0x4e>
		counter = 0;
 2b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 2b6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	uint8_t targetMode = (counter >= percent) ? LOW:HIGH;
 2ba:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end>
 2be:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x1>
 2c2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <percent>
 2c6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <percent+0x1>
 2ca:	ed e0       	ldi	r30, 0x0D	; 13
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < PORTS; ++i) {	
		if(targetMode == HIGH) {
 2d2:	42 17       	cp	r20, r18
 2d4:	53 07       	cpc	r21, r19
 2d6:	68 f4       	brcc	.+26     	; 0x2f2 <__vector_11+0x86>
			*portContainerArray[i].destination_port = portContainerArray[i].portBits;		// sets the specified bit for the PORTB/D Register			
 2d8:	c0 81       	ld	r28, Z
 2da:	d1 81       	ldd	r29, Z+1	; 0x01
 2dc:	dc 01       	movw	r26, r24
 2de:	aa 0f       	add	r26, r26
 2e0:	bb 1f       	adc	r27, r27
 2e2:	a8 0f       	add	r26, r24
 2e4:	b9 1f       	adc	r27, r25
 2e6:	a3 5f       	subi	r26, 0xF3	; 243
 2e8:	be 4f       	sbci	r27, 0xFE	; 254
 2ea:	12 96       	adiw	r26, 0x02	; 2
 2ec:	6c 91       	ld	r22, X
 2ee:	68 83       	st	Y, r22
 2f0:	0f c0       	rjmp	.+30     	; 0x310 <__vector_11+0xa4>
		}
		else {
			*portContainerArray[i].destination_port &= ~(portContainerArray[i].portBits);	// clears the specified bit for the PORTB/D Register
 2f2:	dc 01       	movw	r26, r24
 2f4:	aa 0f       	add	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	a8 0f       	add	r26, r24
 2fa:	b9 1f       	adc	r27, r25
 2fc:	a3 5f       	subi	r26, 0xF3	; 243
 2fe:	be 4f       	sbci	r27, 0xFE	; 254
 300:	12 96       	adiw	r26, 0x02	; 2
 302:	6c 91       	ld	r22, X
 304:	a0 81       	ld	r26, Z
 306:	b1 81       	ldd	r27, Z+1	; 0x01
 308:	7c 91       	ld	r23, X
 30a:	60 95       	com	r22
 30c:	67 23       	and	r22, r23
 30e:	6c 93       	st	X, r22
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	33 96       	adiw	r30, 0x03	; 3
ISR (TIMER1_COMPA_vect)	{
	counter++;
	if(counter >= budget)
		counter = 0;
	uint8_t targetMode = (counter >= percent) ? LOW:HIGH;
	for (uint8_t i = 0; i < PORTS; ++i) {	
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	e1 f6       	brne	.-72     	; 0x2d2 <__vector_11+0x66>
		}
		else {
			*portContainerArray[i].destination_port &= ~(portContainerArray[i].portBits);	// clears the specified bit for the PORTB/D Register
		}
	}
}
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <init>:
/* main init function
   inits PWM and analog
*/
void init() {
	// init analog 
	analog_init();
 340:	0e 94 c6 00 	call	0x18c	; 0x18c <analog_init>
	
	// init pwm
	pwm_pins_init();
 344:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm_pins_init>
	
	// enable interrupts
	sei();
 348:	78 94       	sei
 34a:	08 95       	ret

0000034c <delay>:
}

// helper function to simulate variable time delay
void delay(uint16_t ms) {
	for(uint16_t i = 0; i < ms; ++i) {
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	69 f0       	breq	.+26     	; 0x36a <delay+0x1e>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	ef e9       	ldi	r30, 0x9F	; 159
 356:	ff e0       	ldi	r31, 0x0F	; 15
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <delay+0xc>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <delay+0x12>
 35e:	00 00       	nop
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	82 17       	cp	r24, r18
 366:	93 07       	cpc	r25, r19
 368:	a9 f7       	brne	.-22     	; 0x354 <delay+0x8>
 36a:	08 95       	ret

0000036c <loop>:

// main loop
void loop() {
	uint16_t speed;		// local speed variable 
	// determine direction and speed
	if (ADC_X < -STD_HYSTERESE) {
 36c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 370:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 374:	86 3f       	cpi	r24, 0xF6	; 246
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	84 f4       	brge	.+32     	; 0x39a <loop+0x2e>
		direction_right = false;
 37a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <direction_right>
		speed = -STD_SPEED / (ADC_X / STD_HYSTERESE);
 37e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 382:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 386:	6a e0       	ldi	r22, 0x0A	; 10
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	98 ef       	ldi	r25, 0xF8	; 248
 392:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 396:	9b 01       	movw	r18, r22
 398:	19 c0       	rjmp	.+50     	; 0x3cc <loop+0x60>
	}
	else if (ADC_X > STD_HYSTERESE) {
 39a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 39e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 3a2:	0b 97       	sbiw	r24, 0x0b	; 11
 3a4:	8c f0       	brlt	.+34     	; 0x3c8 <loop+0x5c>
		direction_right = true;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction_right>
		speed =  STD_SPEED / (ADC_X / STD_HYSTERESE);
 3ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 3b0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 3b4:	6a e0       	ldi	r22, 0x0A	; 10
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 3bc:	80 ed       	ldi	r24, 0xD0	; 208
 3be:	97 e0       	ldi	r25, 0x07	; 7
 3c0:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 3c4:	9b 01       	movw	r18, r22
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <loop+0x60>
	}
	else { // if the measurement ADC_X is in between the threshold set speed to STD_SPEED
		speed =  STD_SPEED;
 3c8:	20 ed       	ldi	r18, 0xD0	; 208
 3ca:	37 e0       	ldi	r19, 0x07	; 7
	}
	
	// disable the current LED
	set_pin_active(burning_led, false); 
 3cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <burning_led>
/* sets the pin in the cache byte to HIGH or LOW
	id	  = pin number
	level = HIGH or LOW
*/
inline void set_pin_active(uint8_t id, bool state) {
	PIN* target_pin = pins + id;	// get the correct pin
 3d0:	e8 2f       	mov	r30, r24
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	af 01       	movw	r20, r30
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	e4 0f       	add	r30, r20
 3dc:	f5 1f       	adc	r31, r21
 3de:	ed 5e       	subi	r30, 0xED	; 237
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
	if (state) {
		target_pin->targetPortContainer->portBits |=  (target_pin->bit_in_register);	// sets the specified bit accordingly
	}
	else {
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);	// clears the specified bit accordingly
 3e2:	a0 81       	ld	r26, Z
 3e4:	b1 81       	ldd	r27, Z+1	; 0x01
 3e6:	12 96       	adiw	r26, 0x02	; 2
 3e8:	4c 91       	ld	r20, X
 3ea:	12 97       	sbiw	r26, 0x02	; 2
 3ec:	92 81       	ldd	r25, Z+2	; 0x02
 3ee:	90 95       	com	r25
 3f0:	94 23       	and	r25, r20
 3f2:	12 96       	adiw	r26, 0x02	; 2
 3f4:	9c 93       	st	X, r25
	}
	
	// disable the current LED
	set_pin_active(burning_led, false); 
	// determine the next LED
	if(direction_right) {
 3f6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <direction_right>
 3fa:	99 23       	and	r25, r25
 3fc:	49 f0       	breq	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		burning_led = (burning_led + PWM_PINS - 1) % PWM_PINS;
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	05 96       	adiw	r24, 0x05	; 5
 402:	66 e0       	ldi	r22, 0x06	; 6
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 40a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <burning_led>
 40e:	08 c0       	rjmp	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	else {
		burning_led = (burning_led + 1) % PWM_PINS;
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	66 e0       	ldi	r22, 0x06	; 6
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 41c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <burning_led>
/* sets the pin in the cache byte to HIGH or LOW
	id	  = pin number
	level = HIGH or LOW
*/
inline void set_pin_active(uint8_t id, bool state) {
	PIN* target_pin = pins + id;	// get the correct pin
 420:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <burning_led>
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	cf 01       	movw	r24, r30
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	e8 0f       	add	r30, r24
 42e:	f9 1f       	adc	r31, r25
 430:	ed 5e       	subi	r30, 0xED	; 237
 432:	fe 4f       	sbci	r31, 0xFE	; 254
	if (state) {
		target_pin->targetPortContainer->portBits |=  (target_pin->bit_in_register);	// sets the specified bit accordingly
 434:	a0 81       	ld	r26, Z
 436:	b1 81       	ldd	r27, Z+1	; 0x01
 438:	12 96       	adiw	r26, 0x02	; 2
 43a:	9c 91       	ld	r25, X
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	82 81       	ldd	r24, Z+2	; 0x02
 440:	89 2b       	or	r24, r25
 442:	12 96       	adiw	r26, 0x02	; 2
 444:	8c 93       	st	X, r24
	}
	// enable the current LED
	set_pin_active(burning_led, true);
	
	// simulate the speed
	delay(speed);
 446:	c9 01       	movw	r24, r18
 448:	0e 94 a6 01 	call	0x34c	; 0x34c <delay>
 44c:	08 95       	ret

0000044e <main>:
#include "double_poti.h"



int main(void) {
    init();
 44e:	0e 94 a0 01 	call	0x340	; 0x340 <init>
	
    while (1) {
		loop();
 452:	0e 94 b6 01 	call	0x36c	; 0x36c <loop>
 456:	fd cf       	rjmp	.-6      	; 0x452 <main+0x4>

00000458 <__divmodhi4>:
 458:	97 fb       	bst	r25, 7
 45a:	07 2e       	mov	r0, r23
 45c:	16 f4       	brtc	.+4      	; 0x462 <__divmodhi4+0xa>
 45e:	00 94       	com	r0
 460:	07 d0       	rcall	.+14     	; 0x470 <__divmodhi4_neg1>
 462:	77 fd       	sbrc	r23, 7
 464:	09 d0       	rcall	.+18     	; 0x478 <__divmodhi4_neg2>
 466:	0e 94 40 02 	call	0x480	; 0x480 <__udivmodhi4>
 46a:	07 fc       	sbrc	r0, 7
 46c:	05 d0       	rcall	.+10     	; 0x478 <__divmodhi4_neg2>
 46e:	3e f4       	brtc	.+14     	; 0x47e <__divmodhi4_exit>

00000470 <__divmodhi4_neg1>:
 470:	90 95       	com	r25
 472:	81 95       	neg	r24
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <__divmodhi4_neg2>:
 478:	70 95       	com	r23
 47a:	61 95       	neg	r22
 47c:	7f 4f       	sbci	r23, 0xFF	; 255

0000047e <__divmodhi4_exit>:
 47e:	08 95       	ret

00000480 <__udivmodhi4>:
 480:	aa 1b       	sub	r26, r26
 482:	bb 1b       	sub	r27, r27
 484:	51 e1       	ldi	r21, 0x11	; 17
 486:	07 c0       	rjmp	.+14     	; 0x496 <__udivmodhi4_ep>

00000488 <__udivmodhi4_loop>:
 488:	aa 1f       	adc	r26, r26
 48a:	bb 1f       	adc	r27, r27
 48c:	a6 17       	cp	r26, r22
 48e:	b7 07       	cpc	r27, r23
 490:	10 f0       	brcs	.+4      	; 0x496 <__udivmodhi4_ep>
 492:	a6 1b       	sub	r26, r22
 494:	b7 0b       	sbc	r27, r23

00000496 <__udivmodhi4_ep>:
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	5a 95       	dec	r21
 49c:	a9 f7       	brne	.-22     	; 0x488 <__udivmodhi4_loop>
 49e:	80 95       	com	r24
 4a0:	90 95       	com	r25
 4a2:	bc 01       	movw	r22, r24
 4a4:	cd 01       	movw	r24, r26
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
