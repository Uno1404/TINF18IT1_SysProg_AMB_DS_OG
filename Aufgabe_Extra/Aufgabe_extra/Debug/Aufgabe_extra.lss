
Aufgabe_extra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004b4  00000548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800106  00800106  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c80  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000526  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000499  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 02 	call	0x456	; 0x456 <main>
  9e:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pwm_pins_init>:
}

void pwm_pins_init() {
	
	uint16_t time = 0x01FF;
	OCR1A = (uint8_t) time;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = (uint8_t)(time >> 8);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  ba:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	
	//set timer mode to CTC
	SET_PIN_HIGH(TCCR1A, WGM11);
  be:	e0 e8       	ldi	r30, 0x80	; 128
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24

	//Set the ISR COMPA vect
	SET_PIN_HIGH(TIMSK1, OCIE1A);
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24

	//set prescaler to 0 and start timer
	SET_PIN_HIGH(TCCR1B, CS10);
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
	
	portContainerArray[0].destination_port = &PORTD;
  dc:	ad e0       	ldi	r26, 0x0D	; 13
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	8b e2       	ldi	r24, 0x2B	; 43
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	9c 93       	st	X, r25
  e8:	8e 93       	st	-X, r24
	portContainerArray[0].portBits = 0x00;
  ea:	12 96       	adiw	r26, 0x02	; 2
  ec:	1c 92       	st	X, r1
  ee:	12 97       	sbiw	r26, 0x02	; 2
	portContainerArray[1].destination_port = &PORTB;
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	14 96       	adiw	r26, 0x04	; 4
  f6:	9c 93       	st	X, r25
  f8:	8e 93       	st	-X, r24
  fa:	13 97       	sbiw	r26, 0x03	; 3
	portContainerArray[1].portBits = 0x00;
  fc:	15 96       	adiw	r26, 0x05	; 5
  fe:	1c 92       	st	X, r1
 100:	15 97       	sbiw	r26, 0x05	; 5

	pins[0].targetPortContainer = portContainerArray;
 102:	e3 e1       	ldi	r30, 0x13	; 19
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	b1 83       	std	Z+1, r27	; 0x01
 108:	a0 83       	st	Z, r26
	pins[0].bit_in_register = (1 << PORTD3);
 10a:	28 e0       	ldi	r18, 0x08	; 8
 10c:	22 83       	std	Z+2, r18	; 0x02
	pins[1].targetPortContainer = portContainerArray;
 10e:	b5 83       	std	Z+5, r27	; 0x05
 110:	a4 83       	std	Z+4, r26	; 0x04
	pins[1].bit_in_register = (1 << PORTD5);
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	86 83       	std	Z+6, r24	; 0x06
	pins[2].targetPortContainer = portContainerArray;
 116:	b1 87       	std	Z+9, r27	; 0x09
 118:	a0 87       	std	Z+8, r26	; 0x08
	pins[2].bit_in_register = (1 << PORTD6);
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	82 87       	std	Z+10, r24	; 0x0a
	pins[3].targetPortContainer = portContainerArray+1;
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	95 87       	std	Z+13, r25	; 0x0d
 124:	84 87       	std	Z+12, r24	; 0x0c
	pins[3].bit_in_register = (1 << PORTB1);
 126:	32 e0       	ldi	r19, 0x02	; 2
 128:	36 87       	std	Z+14, r19	; 0x0e
	pins[4].targetPortContainer = portContainerArray+1;
 12a:	91 8b       	std	Z+17, r25	; 0x11
 12c:	80 8b       	std	Z+16, r24	; 0x10
	pins[4].bit_in_register = (1 << PORTB2);
 12e:	34 e0       	ldi	r19, 0x04	; 4
 130:	32 8b       	std	Z+18, r19	; 0x12
	pins[5].targetPortContainer = portContainerArray+1;
 132:	95 8b       	std	Z+21, r25	; 0x15
 134:	84 8b       	std	Z+20, r24	; 0x14
	pins[5].bit_in_register = (1 << PORTB3);
 136:	26 8b       	std	Z+22, r18	; 0x16
	
	DDRD |= 0b01101000;
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	88 66       	ori	r24, 0x68	; 104
 13c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00001110;
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8e 60       	ori	r24, 0x0E	; 14
 142:	84 b9       	out	0x04, r24	; 4
	
	for (int i = 0; i < PWM_PINS; ++i) {
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);
	}
}

inline void set_pin_active(uint8_t id, bool is_active) {
	PIN* target_pin = pins+id;
 148:	fc 01       	movw	r30, r24
 14a:	ff 27       	eor	r31, r31
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ed 5e       	subi	r30, 0xED	; 237
 156:	fe 4f       	sbci	r31, 0xFE	; 254
	target_pin->active = is_active;
 158:	13 82       	std	Z+3, r1	; 0x03
	PIN* target_pin = pins+id;
	if(level == HIGH) {
		target_pin->targetPortContainer->portBits |= (target_pin->bit_in_register);
	}
	else  {
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);
 15a:	a0 81       	ld	r26, Z
 15c:	b1 81       	ldd	r27, Z+1	; 0x01
 15e:	12 96       	adiw	r26, 0x02	; 2
 160:	3c 91       	ld	r19, X
 162:	12 97       	sbiw	r26, 0x02	; 2
 164:	22 81       	ldd	r18, Z+2	; 0x02
 166:	20 95       	com	r18
 168:	23 23       	and	r18, r19
 16a:	12 96       	adiw	r26, 0x02	; 2
 16c:	2c 93       	st	X, r18
	pins[5].bit_in_register = (1 << PORTB3);
	
	DDRD |= 0b01101000;
	DDRB |= 0b00001110;
	
	for (int i = 0; i < PWM_PINS; ++i) {
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	86 30       	cpi	r24, 0x06	; 6
 172:	91 05       	cpc	r25, r1
 174:	49 f7       	brne	.-46     	; 0x148 <pwm_pins_init+0xa2>
	}
}

inline void set_pin_active(uint8_t id, bool is_active) {
	PIN* target_pin = pins+id;
	target_pin->active = is_active;
 176:	e3 e1       	ldi	r30, 0x13	; 19
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	83 83       	std	Z+3, r24	; 0x03
PORT_CONTAINER portContainerArray[2];

inline void set_pin(uint8_t id, uint8_t level, bool checkForIsActive) {
	PIN* target_pin = pins+id;
	if(level == HIGH) {
		target_pin->targetPortContainer->portBits |= (target_pin->bit_in_register);
 17e:	a0 81       	ld	r26, Z
 180:	b1 81       	ldd	r27, Z+1	; 0x01
 182:	12 96       	adiw	r26, 0x02	; 2
 184:	9c 91       	ld	r25, X
 186:	12 97       	sbiw	r26, 0x02	; 2
 188:	82 81       	ldd	r24, Z+2	; 0x02
 18a:	89 2b       	or	r24, r25
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	8c 93       	st	X, r24
 190:	08 95       	ret

00000192 <__vector_21>:
	}

	set_pin_active(0, true);
}

ISR(ADC_vect) {
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	if((ADMUX & 0x0F) == X_PIN) {
 1b0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	89 f4       	brne	.+34     	; 0x1dc <__vector_21+0x4a>
		ADC_X = (ADCL | (ADCH << 8)) - 512;
 1ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1be:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	92 2b       	or	r25, r18
 1c6:	92 50       	subi	r25, 0x02	; 2
 1c8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_X+0x1>
 1cc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_X>
		ADMUX = (ADMUX & 0xF0) | Y_PIN;
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	80 83       	st	Z, r24
 1da:	1c c0       	rjmp	.+56     	; 0x214 <__vector_21+0x82>
	}
	else {
		ADC_Y = (ADCL | (ADCH << 8));
 1dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1e0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	92 2b       	or	r25, r18
 1e8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_Y+0x1>
 1ec:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_Y>
		percent = ADC_Y / 5;
 1f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_Y>
 1f4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ADC_Y+0x1>
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 200:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 204:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
		ADMUX = (ADMUX & 0xF0) | X_PIN;
 208:	ec e7       	ldi	r30, 0x7C	; 124
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_11>:


ISR (TIMER1_COMPA_vect)	{	// timer overflow interrupt
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	//percent = ADC_Y / 5;
	counter++;
 258:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 25c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 266:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if(counter >= budget)
 26a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <budget>
 26e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <budget+0x1>
 272:	82 17       	cp	r24, r18
 274:	93 07       	cpc	r25, r19
 276:	20 f0       	brcs	.+8      	; 0x280 <__vector_11+0x4e>
		counter = 0;
 278:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 27c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	uint8_t targetMode = (counter >= percent) ? LOW:HIGH;	
 280:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end>
 284:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x1>
 288:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 28c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 290:	ed e0       	ldi	r30, 0x0D	; 13
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 2; ++i) {
		if(targetMode == HIGH){
 298:	42 17       	cp	r20, r18
 29a:	53 07       	cpc	r21, r19
 29c:	68 f4       	brcc	.+26     	; 0x2b8 <__vector_11+0x86>
			*portContainerArray[i].destination_port = portContainerArray[i].portBits;			
 29e:	c0 81       	ld	r28, Z
 2a0:	d1 81       	ldd	r29, Z+1	; 0x01
 2a2:	dc 01       	movw	r26, r24
 2a4:	aa 0f       	add	r26, r26
 2a6:	bb 1f       	adc	r27, r27
 2a8:	a8 0f       	add	r26, r24
 2aa:	b9 1f       	adc	r27, r25
 2ac:	a3 5f       	subi	r26, 0xF3	; 243
 2ae:	be 4f       	sbci	r27, 0xFE	; 254
 2b0:	12 96       	adiw	r26, 0x02	; 2
 2b2:	6c 91       	ld	r22, X
 2b4:	68 83       	st	Y, r22
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <__vector_11+0xa4>
		}
		else{
			*portContainerArray[i].destination_port &= ~(portContainerArray[i].portBits);
 2b8:	dc 01       	movw	r26, r24
 2ba:	aa 0f       	add	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	a8 0f       	add	r26, r24
 2c0:	b9 1f       	adc	r27, r25
 2c2:	a3 5f       	subi	r26, 0xF3	; 243
 2c4:	be 4f       	sbci	r27, 0xFE	; 254
 2c6:	12 96       	adiw	r26, 0x02	; 2
 2c8:	6c 91       	ld	r22, X
 2ca:	a0 81       	ld	r26, Z
 2cc:	b1 81       	ldd	r27, Z+1	; 0x01
 2ce:	7c 91       	ld	r23, X
 2d0:	60 95       	com	r22
 2d2:	67 23       	and	r22, r23
 2d4:	6c 93       	st	X, r22
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	33 96       	adiw	r30, 0x03	; 3
	//percent = ADC_Y / 5;
	counter++;
	if(counter >= budget)
		counter = 0;
	uint8_t targetMode = (counter >= percent) ? LOW:HIGH;	
	for(uint8_t i = 0; i < 2; ++i) {
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	91 05       	cpc	r25, r1
 2de:	e1 f6       	brne	.-72     	; 0x298 <__vector_11+0x66>
		}
		else{
			*portContainerArray[i].destination_port &= ~(portContainerArray[i].portBits);
		}
	}
}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <analog_init>:

void analog_init() {	
	// A0
	ADMUX = 0;
 306:	ec e7       	ldi	r30, 0x7C	; 124
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	10 82       	st	Z, r1
	// use AVcc as the reference
	SET_PIN_HIGH(ADMUX, REFS0);
 30c:	80 81       	ld	r24, Z
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	80 83       	st	Z, r24
	
	// 128 prescale for 16Mhz
	SET_PIN_HIGH(ADCSRA, ADPS2);
 312:	ea e7       	ldi	r30, 0x7A	; 122
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS1);
 31c:	80 81       	ld	r24, Z
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 83       	st	Z, r24
	SET_PIN_HIGH(ADCSRA, ADPS0);
 322:	80 81       	ld	r24, Z
 324:	81 60       	ori	r24, 0x01	; 1
 326:	80 83       	st	Z, r24

	// Set ADC Auto Trigger Enable
	SET_PIN_HIGH(ADCSRA, ADATE);
 328:	80 81       	ld	r24, Z
 32a:	80 62       	ori	r24, 0x20	; 32
 32c:	80 83       	st	Z, r24
	
	// 0 for free running mode
	ADCSRB = 0;
 32e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	// Enable the ADC
	SET_PIN_HIGH(ADCSRA, ADEN);
 332:	80 81       	ld	r24, Z
 334:	80 68       	ori	r24, 0x80	; 128
 336:	80 83       	st	Z, r24
	// Enable Interrupts
	SET_PIN_HIGH(ADCSRA, ADIE);
 338:	80 81       	ld	r24, Z
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	80 83       	st	Z, r24

	// Start the ADC conversion
	SET_PIN_HIGH(ADCSRA, ADSC);	
 33e:	80 81       	ld	r24, Z
 340:	80 64       	ori	r24, 0x40	; 64
 342:	80 83       	st	Z, r24
 344:	08 95       	ret

00000346 <init>:
}

void init() {
	// analog init
	analog_init();
 346:	0e 94 83 01 	call	0x306	; 0x306 <analog_init>
	
	// init pwm
	pwm_pins_init();	
 34a:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm_pins_init>
	
	// enable interrupts
	sei();
 34e:	78 94       	sei
 350:	08 95       	ret

00000352 <delay>:
}

void delay(uint16_t ms) {
	for(uint16_t i = 0; i < ms; ++i) {
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	69 f0       	breq	.+26     	; 0x370 <delay+0x1e>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	ef e9       	ldi	r30, 0x9F	; 159
 35c:	ff e0       	ldi	r31, 0x0F	; 15
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <delay+0xc>
 362:	00 c0       	rjmp	.+0      	; 0x364 <delay+0x12>
 364:	00 00       	nop
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	82 17       	cp	r24, r18
 36c:	93 07       	cpc	r25, r19
 36e:	a9 f7       	brne	.-22     	; 0x35a <delay+0x8>
 370:	08 95       	ret

00000372 <loop>:
	} 	
}

void loop() {
	uint16_t speed;
	if (ADC_X < -STD_HYSTERESE) {
 372:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 376:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 37a:	86 3f       	cpi	r24, 0xF6	; 246
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	84 f4       	brge	.+32     	; 0x3a0 <loop+0x2e>
		direction_right = false;
 380:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <direction_right>
		speed = -STD_SPEED/(ADC_X/10);
 384:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 388:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 38c:	6a e0       	ldi	r22, 0x0A	; 10
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	98 ef       	ldi	r25, 0xF8	; 248
 398:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 39c:	9b 01       	movw	r18, r22
 39e:	19 c0       	rjmp	.+50     	; 0x3d2 <loop+0x60>
	}
	else if (ADC_X > STD_HYSTERESE) {
 3a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 3a4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 3a8:	0b 97       	sbiw	r24, 0x0b	; 11
 3aa:	8c f0       	brlt	.+34     	; 0x3ce <loop+0x5c>
		direction_right = true;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction_right>
		speed = STD_SPEED/(ADC_X/10);
 3b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_X>
 3b6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_X+0x1>
 3ba:	6a e0       	ldi	r22, 0x0A	; 10
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 3c2:	80 ed       	ldi	r24, 0xD0	; 208
 3c4:	97 e0       	ldi	r25, 0x07	; 7
 3c6:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 3ca:	9b 01       	movw	r18, r22
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <loop+0x60>
	}
	else {
		speed = STD_SPEED;
 3ce:	20 ed       	ldi	r18, 0xD0	; 208
 3d0:	37 e0       	ldi	r19, 0x07	; 7
	}
	set_pin_active(burning_led, false);
 3d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <burning_led>
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);
	}
}

inline void set_pin_active(uint8_t id, bool is_active) {
	PIN* target_pin = pins+id;
 3d6:	e8 2f       	mov	r30, r24
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ed 5e       	subi	r30, 0xED	; 237
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
	target_pin->active = is_active;
 3e6:	13 82       	std	Z+3, r1	; 0x03
	PIN* target_pin = pins+id;
	if(level == HIGH) {
		target_pin->targetPortContainer->portBits |= (target_pin->bit_in_register);
	}
	else  {
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);
 3e8:	a0 81       	ld	r26, Z
 3ea:	b1 81       	ldd	r27, Z+1	; 0x01
 3ec:	12 96       	adiw	r26, 0x02	; 2
 3ee:	4c 91       	ld	r20, X
 3f0:	12 97       	sbiw	r26, 0x02	; 2
 3f2:	92 81       	ldd	r25, Z+2	; 0x02
 3f4:	90 95       	com	r25
 3f6:	94 23       	and	r25, r20
 3f8:	12 96       	adiw	r26, 0x02	; 2
 3fa:	9c 93       	st	X, r25
	}
	else {
		speed = STD_SPEED;
	}
	set_pin_active(burning_led, false);
	if(direction_right) {
 3fc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <direction_right>
 400:	99 23       	and	r25, r25
 402:	49 f0       	breq	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		burning_led = (burning_led+6-1)% 6;
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	05 96       	adiw	r24, 0x05	; 5
 408:	66 e0       	ldi	r22, 0x06	; 6
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 410:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <burning_led>
 414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	}
	else {
		burning_led = (burning_led+1)% 6;
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	66 e0       	ldi	r22, 0x06	; 6
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	0e 94 30 02 	call	0x460	; 0x460 <__divmodhi4>
 422:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <burning_led>
		target_pin->targetPortContainer->portBits &= ~(target_pin->bit_in_register);
	}
}

inline void set_pin_active(uint8_t id, bool is_active) {
	PIN* target_pin = pins+id;
 426:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <burning_led>
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	ed 5e       	subi	r30, 0xED	; 237
 436:	fe 4f       	sbci	r31, 0xFE	; 254
	target_pin->active = is_active;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	83 83       	std	Z+3, r24	; 0x03
PORT_CONTAINER portContainerArray[2];

inline void set_pin(uint8_t id, uint8_t level, bool checkForIsActive) {
	PIN* target_pin = pins+id;
	if(level == HIGH) {
		target_pin->targetPortContainer->portBits |= (target_pin->bit_in_register);
 43c:	a0 81       	ld	r26, Z
 43e:	b1 81       	ldd	r27, Z+1	; 0x01
 440:	12 96       	adiw	r26, 0x02	; 2
 442:	9c 91       	ld	r25, X
 444:	12 97       	sbiw	r26, 0x02	; 2
 446:	82 81       	ldd	r24, Z+2	; 0x02
 448:	89 2b       	or	r24, r25
 44a:	12 96       	adiw	r26, 0x02	; 2
 44c:	8c 93       	st	X, r24
	}
	else {
		burning_led = (burning_led+1)% 6;
	}
	set_pin_active(burning_led, true);
	delay(speed);
 44e:	c9 01       	movw	r24, r18
 450:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
 454:	08 95       	ret

00000456 <main>:
 */

#include "double_poti.h"

int main(void) {
    init();
 456:	0e 94 a3 01 	call	0x346	; 0x346 <init>
	
    while (1) {
		loop();
 45a:	0e 94 b9 01 	call	0x372	; 0x372 <loop>
 45e:	fd cf       	rjmp	.-6      	; 0x45a <main+0x4>

00000460 <__divmodhi4>:
 460:	97 fb       	bst	r25, 7
 462:	07 2e       	mov	r0, r23
 464:	16 f4       	brtc	.+4      	; 0x46a <__divmodhi4+0xa>
 466:	00 94       	com	r0
 468:	07 d0       	rcall	.+14     	; 0x478 <__divmodhi4_neg1>
 46a:	77 fd       	sbrc	r23, 7
 46c:	09 d0       	rcall	.+18     	; 0x480 <__divmodhi4_neg2>
 46e:	0e 94 44 02 	call	0x488	; 0x488 <__udivmodhi4>
 472:	07 fc       	sbrc	r0, 7
 474:	05 d0       	rcall	.+10     	; 0x480 <__divmodhi4_neg2>
 476:	3e f4       	brtc	.+14     	; 0x486 <__divmodhi4_exit>

00000478 <__divmodhi4_neg1>:
 478:	90 95       	com	r25
 47a:	81 95       	neg	r24
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	08 95       	ret

00000480 <__divmodhi4_neg2>:
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255

00000486 <__divmodhi4_exit>:
 486:	08 95       	ret

00000488 <__udivmodhi4>:
 488:	aa 1b       	sub	r26, r26
 48a:	bb 1b       	sub	r27, r27
 48c:	51 e1       	ldi	r21, 0x11	; 17
 48e:	07 c0       	rjmp	.+14     	; 0x49e <__udivmodhi4_ep>

00000490 <__udivmodhi4_loop>:
 490:	aa 1f       	adc	r26, r26
 492:	bb 1f       	adc	r27, r27
 494:	a6 17       	cp	r26, r22
 496:	b7 07       	cpc	r27, r23
 498:	10 f0       	brcs	.+4      	; 0x49e <__udivmodhi4_ep>
 49a:	a6 1b       	sub	r26, r22
 49c:	b7 0b       	sbc	r27, r23

0000049e <__udivmodhi4_ep>:
 49e:	88 1f       	adc	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	5a 95       	dec	r21
 4a4:	a9 f7       	brne	.-22     	; 0x490 <__udivmodhi4_loop>
 4a6:	80 95       	com	r24
 4a8:	90 95       	com	r25
 4aa:	bc 01       	movw	r22, r24
 4ac:	cd 01       	movw	r24, r26
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
